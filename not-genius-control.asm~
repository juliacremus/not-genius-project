.device ATmega328p

; Reset
.org 0x00
rjmp MAIN

; counter overflow
.org 0x001A
rjmp read_from_user

; Configura variaveis da memoria
.dseg
     .org SRAM_START

     IGNORE_USER: .byte 1  ; flag para ignorar entradas do usuário enquano o programa pensa

     N_RANDOM_SIG: .byte 1  ; quantidade de sinais já encaminhados
     not_genius_array: .byte 10  ; tamanho da array que conterá os sinais (o jogo acaba quando L > 100)

     N_SIG_USER: .byte 1  ; número de entradas que o usuário entrou
     user_sig_array: .byte 10  ; tamanho da array que conterá os sinais do usuário

     last_led_turned_on: .byte 1  ; variavel pra armazenar a mascara do último pino ligado

	main_sequence: .byte 10 ; Sequência Principal
	main_sequence_size: .byte 1 ; Tamanho da Sequência Principal
	main_sequence_current_element: .byte 1 ; Elemento de sequência atual a ser mostrado
	lfsr_value1: .byte 1 ; Seed para o LFSR 1
	lfsr_value2: .byte 1 ; Seed para o LFSR 2
	lfsr_value: .byte 1
     counter: .byte 1
.cseg

; Initialize stack
.macro initialize_stack
       ldi R16, HIGH(RAMEND)
       out SPH, R16
       ldi R16, LOW(RAMEND)
       out SPL, R16
.endmacro

;============================= SUBROTINAS DE CONFIGURAÇÃO =============================;
ConfigureAdc0:
	; Configure AVcc
	;ldi R16, (1 << REFS0)
	ldi R16, 0b01000000
	sts ADMUX, R16

	; Configure ADC Enable, Start Conversion, Auto Trigger Enable, Prescaler 1:32
	;ldi R16, (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | (1 << ADPS2) | (1 << ADPS0)
	ldi R16, 0b11100101
	sts ADCSRA, R16

	; Configure Duty cycle
	clr R16
	sts ADCSRB, R16

	ret

ConfigureTimer:
	; Zera o contador
	clr R16
	sts TCNT1L, R16
	sts TCNT1H, R16

	; Configura clk/256 e Modo CTC
	ldi	R16, (1 << CS12) | (1 << WGM12)
	sts TCCR1B, R16

	; Configura para Clear on Compare Match
	ldi R16, (1 << COM1A1)
	sts TCCR1A, R16

	; Valor máximo do contador que para 1s é 31249
	ldi	R16, 0x11
	ldi R17, 0x7A
	sts	OCR1AL, R16
	sts	OCR1AH, R17

	; Configura Interrupção para overflow
	lds	R16, TIMSK1
	ori R16, (1 << TOIE1)
	sts TIMSK1, R16

	ret

;=========================== SUBROTINA GERADORA DE SEQUÊNCIA ==========================;
GenerateSequence:
	; Gera sequência de 100 números que variam de 0 a 3

	push ZL
	push ZH
	push R16
	push R17
	push R18
	push R19

	; Gera primeira seed
	;call GenerateSeed
	;lds R16, lfsr_value
     ldi R16, 0b11011001 ; Manual seed para simulação
	sts lfsr_value1, R16

	; Gera segunda seed
	;call GenerateSeed
	;lds R16, lfsr_value
     ldi R16, 0b10001101 ; Manual seed para simulação
	sts lfsr_value2, R16

	ldi R16, 0b0 ; Tamanho atual da sequência gerada
	ldi R17, 2 ; Tamanho total da sequência gerada
	ldi R18, 0b1 ; Máscara para pegar o bit-0

	; Configura ponteiro para a região de memória main_sequence em Z
	ldi ZL, LOW(main_sequence)
	ldi ZH, HIGH(main_sequence)

	generate_sequence_element:
		; Gera primeiro valor com LFSR
		lds R19, lfsr_value1
		sts lfsr_value, R19
		call LFSR
		lds R19, lfsr_value
		sts lfsr_value1, R19
		; Gera segundo valor com LFSR
		lds R20, lfsr_value2
		sts lfsr_value, R20
		call LFSR
		lds R20, lfsr_value
		sts lfsr_value2, R20

		; Seleciona apenas o bit-0 de cada valor
		and R19, R18
		and R20, R18

		lsl R20 ; Shifita segundo valor para esquerda
		or R19, R20 ; Compõe o valor final

		cp R16, R17 ; Compara o tamanho atual com máximo
		breq sequence_generation_end ; Se tamanho atual = máximo, finaliza rotina

		st Z+, R19
		inc R16
		sts main_sequence_size, R16

		rjmp generate_sequence_element

	sequence_generation_end:
		inc R16
		sts main_sequence_size, R16
		pop R19
		pop R18
		pop R17
		pop R16
		pop ZH
		pop ZL
		ret

LFSR:
	; Faz um LFSR com os últimos dois bits de uma bitstring localizada em lfsr_value
	push R16
	push R17
	push R18
	push R19

	ldi R16, 0b1 ; Máscara para pegar o bit-0
	ldi R17, 0b10 ; Máscara para pegar o bit-1
	ldi R18, 0b01111111; Máscara para tirar o bit-7

	lds R19, lfsr_value
	and R16, R19 ; Aplica a máscara bit-0 no seed
	and R17, R19 ; Aplica a máscara bit-1 no seed

	lsr R17 ; Shifta bit-1 para posição de bit-0
	eor R16, R17 ; Faz xor entre os bits selecionados

	lsl R16
	lsl R16
	lsl R16
	lsl R16
	lsl R16
	lsl R16
	lsl R16

	lsr R19 ; Shifta o seed
	and R19, R18 ; Aplica a máscara bit-7 no lfsr_value

	or R16, R19 ; Coloca o resultado da xor na primeira posição

	sts lfsr_value, R16

	pop R19
	pop R18
	pop R17
	pop R16

	ret

GenerateSeed:
	; Gera um seed fazendo uma conversão analógico-digital de ruído da porta
	push R16
	push R17

	lds	R16, ADCL
	lds	R17, ADCH

	sts lfsr_value, R16

	pop R17
	pop R16

	ret
;======================================================================================;

ShowSequenceElement:
	push R16
	push R17
	push R18
	push R19
	push R20

	lds R16, main_sequence_size
	lds R17, main_sequence_current_element

	ldi R20, 0b1
	out PINB, R20

	rjmp end_show_sequence_element

	cp R16, R17
	breq end_show_sequence_element
	ld R18, X+

	cpi R18, 0b00
	breq turn_on_led_0
	cpi R18, 0b01
	breq turn_on_led_1
	cpi R18, 0b10
	breq turn_on_led_2
	rjmp turn_on_led_3

	inc R17
	sts main_sequence_current_element, R17

	turn_on_led_0:
		ldi R20, 0b1
		out PINB, R20
		rjmp end_show_sequence_element

	turn_on_led_1:
		ldi R20, 0b10
		out PINB, R20
		rjmp end_show_sequence_element

	turn_on_led_2:
		ldi R20, 0b100
		out PINB, R20
		rjmp end_show_sequence_element

	turn_on_led_3:
		ldi R20, 0b1000
		out PINB, R20
		rjmp end_show_sequence_element

	end_show_sequence_element:
		pop R20
		pop R19
		pop R18
		pop R17
		pop R16
		reti

; Subrotinas para configuração
config_leds:

            ; configura as portas em que os LEDs vão estar conectados

            ldi r16, (1 << PC3) | (1 << PC2) | (1 << PC1) | ( 1 << PC0)
            clr R19  ; seta o estado inicial como desligado

            out DDRC, R16
            out PORTC, R19

            ret


config_buttons:

               ; Configura a porta D para receber os quatro botões

               ldi R16, (1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3)
               out DDRD, R16
               ret

config_ng_pointer:

             ldi XL, LOW(not_genius_array)
             ldi XH, HIGH(not_genius_array)

             ret

config_timer:

          ; Clear counter
          clr R16
          sts TCNT1L, R16
          sts TCNT1H, R16

          ; Configure Clock Selection
          ldi R16, (1 << CS12) | (0 << CS11) | (1 << CS10)
          sts TCCR1B, R16

          ; Configure CTC
          ldi R16, (1 << COM1A1) | (0 << COM1A0) | (1 << WGM12)
          sts TCCR1A, R16

          ; configure OCR1A
          ; utilizar isso pra mostrar para o usuario quando errou talvez
          ldi R16, 0x7B ;
          ldi R17, 0x06
          sts OCR1AL, R16
          sts OCR1AH, R16

          ; configure interruption
          ldi r16, (1 << TOIE1)
          sts TIMSK1, R16

          ret

config_user_pointer:

          ldi YL, LOW(user_sig_array)
          ldi YH, HIGH(user_sig_array)

          ret

; Subrotinas para controle dos LEDs
check_ng_limit:

          ; Subrotina para verificação do comprimento da entrada

          lds R16, N_RANDOM_SIG ; Carrega o tamanho atual em R16
          cpi R16, 0x02 ; Tamanho máximo = 10
          breq jmp_reset ; Se N_RANDOM_SIG != 10 continua

          call get_random

          ret

          jmp_reset:
               call reset  ; se igual reseta os valores

get_random:

          ; Subrotina para ler da parte do Leo e adicionar na
          ; array

          clr R16
          clr R17

          ; Máscaras de pinos

          ldi R18, 0b00000001
          ldi R19, 0b00000010
          ldi R20, 0b00000100
          ldi R21, 0b00001000


          ; Lê o valor e adiciona na not_genius_array

          ld R25, Z+ ; lê o valor da sequencia gerada para adicionar no jogo

          cpi R25, 0x00
          breq fisrt_led_mask

          cpi R25, 0x01
          breq second_led_mask

          cpi R25, 0x02
          breq third_led_mask

          cpi R25, 0x03
          breq fourth_led_mask

          fisrt_led_mask:
                         st X+, R18
                         rjmp inc_number_signals

          second_led_mask:
                         st X+, R19
                         rjmp inc_number_signals

          third_led_mask:
                         st X+, R20
                         rjmp inc_number_signals

          fourth_led_mask:
                         st X+, R21
                         rjmp inc_number_signals

          inc_number_signals:
                             ; Lê o valor atual da quantidade de sinais e incrementa

                             lds R17, N_RANDOM_SIG
                             inc R17
                             sts N_RANDOM_SIG, R17

                             ret

turn_on_led:

          ; Função para ligar o LED

          lds R23, last_led_turned_on
          out PORTC, R23

          ;call keep_led_on  ; delay pra manter o LED ligado

          clr R23
          out PORTC, R23

          ret

loop_in_signals:
          ; i == size ? break : keep
          cp R18, R19
          breq get_out

          ; carrega o valor da array do jogo, coloca em uma variavel de memoria
          ld R20, X+ ; array[n]

          sts last_led_turned_on, R20

          ; mantem o led acesso por um tempo
          call turn_on_led

          ; continua no loop até finalizar
          inc R18
          rjmp loop_in_signals

          ret


          get_out:
               ret

send_to_user:
          ldi R18, 0x00
          lds R19, N_RANDOM_SIG

          call config_ng_pointer

          call loop_in_signals

          ret

read_from_user:
     ; Função de armazenamento dos valores do usuário

     ; Veirifica se pode ignorar as entradas do usuario
     lds R16, IGNORE_USER
     cpi R16, 0xff
     breq ignore_user_breq

     cp R25, R26
     breq enough_inputs

     ; define as mascaras dos pinos dos botoes:
     ldi R16, 0b00000001
     ldi R17, 0b00000010
     ldi R18, 0b00000100
     ldi R19, 0b00001000

     in R20, PIND  ; faz a leitura da porta D

     ; acho que não precisaria isso, mas vou manter pra gnt ter maior controle do que
     ; tá sendo encaminhado

     and R16, R20
     and R17, R20
     and R18, R20
     and R19, R20

     ; combina valores no R23

     clr R23

     or R23, R16
     or R23, R17
     or R23, R18
     or R23, R19

     ; ldi R23, 0x01

     st Y+, R23  ; adiciona no fim da array user_sig_array

     lds R25, N_SIG_USER
     inc R25
     sts N_SIG_USER, R25


     rjmp read_from_user


     ignore_user_breq:
          clr R16
          ret

     enough_inputs:
          ret


check_user_inputs:
               ; Função que verifica a entrada do usuário

               call config_ng_pointer
               call config_user_pointer

               ldi R18, 0x00
               lds R19, N_RANDOM_SIG

               call compare_arrays

compare_arrays:

               cp R18, R19  ; i == N_RANDOM_SIG ? break : keep
               breq skip

               ld R20, X+  ; sinal do not genius
               ld R21, Y+  ; sinal do usuario

               cp R20, R21  ; compara os valores
               breq continue_checking

               rjmp reset_and_skip

               skip:
                        ret

               continue_checking:
                    inc R18
                    rjmp compare_arrays

               reset_and_skip:
                    call reset
                    ret


keep_led_on:
     ; Delay utilizado para mostrar o LED ligado para o usuário

	; save R22, R23 and R24 to Stack
	push R22
	push R23
	push R24

	; max counter
	ldi R21, 0xA0

	; initialize delay counters
	LDI R22, 0x00
	LDI R23, 0x00
	LDI R24, 0x00

	; initializes first delay
	first_delay_led:
		inc R22
		; initializes second delay
		second_delay_led:
			inc R23
			; initializes third delay
			third_delay_led:
				inc R24
				cp R24, R21
				brne third_delay_led ; if third delay counter R24 is different from max counter R21 repeat
				ldi R24, 0x00 ; else reset third delay counter R24

			cp R23, R21
			brne second_delay_led ; if second delay counter R23 is different from max counter R21 repeat
			ldi R23, 0x00 ; else reset second delay counter R23

		cp R22, R21
		brne first_delay_led ; if first delay counter R22 is different from max counter R21 repeat
		ldi R22, 0x00 ; else reset second delay counter R22

	; retrieve R23 and R24 to Stack
	pop R24
	pop R23
	pop R22

	ret

delay:

     ; Delay para esperar a resposta do usuário

	; save R22, R23 and R24 to Stack
	push R22
	push R23
	push R24

	; max counter
	ldi R21, 0xA0

	; initialize delay counters
	LDI R22, 0x00
	LDI R23, 0x00
	LDI R24, 0x00

	; initializes first delay
	first_delay:
		inc R22
		; initializes second delay
		second_delay:
			inc R23
			; initializes third delay
			third_delay:
				inc R24
				cp R24, R21
				brne third_delay ; if third delay counter R24 is different from max counter R21 repeat
				ldi R24, 0x00 ; else reset third delay counter R24

			cp R23, R21
			brne second_delay ; if second delay counter R23 is different from max counter R21 repeat
			ldi R23, 0x00 ; else reset second delay counter R23

		cp R22, R21
		brne first_delay ; if first delay counter R22 is different from max counter R21 repeat
		ldi R22, 0x00 ; else reset second delay counter R22

	; retrieve R23 and R24 to Stack
	pop R24
	pop R23
	pop R22

	ret

reset:
     ; reset memory values

     ; reset number of random signals sent
     clr R16
     sts N_RANDOM_SIG, R16

     sts N_SIG_USER, R16

     ret


MAIN: initialize_stack
     ; Realiza as configurações necessárias
     call config_buttons
     call config_leds
     call config_ng_pointer
     call config_timer
     call config_user_pointer

	call ConfigureAdc0
	call ConfigureTimer
	call GenerateSequence

	; Configura para mostrar lista a partir do zero
	clr R16
	sts main_sequence_current_element, R16
	sts counter, R16

     ; Permite interrupções
     sei

     ; Inicia a flag para ignorar o usuário
     ser R16
     sts IGNORE_USER, R16

     clr R16
     sts N_RANDOM_SIG, R16
     sts N_SIG_USER, R16

	   ldi ZL, LOW(main_sequence)
	   ldi ZH, HIGH(main_sequence)

     ; Inicia o processo
     NOT_GENIUS_GAME:


                    call check_ng_limit
                    call send_to_user

                    call config_user_pointer

                    ; entradas do usuário valem
                    clr R16
                    sts IGNORE_USER, R16

                    ; call delay  ; espera um tempo até o usuário se decidir

                    ; Inicializa as variaveis
                    clr R25
                    sts N_SIG_USER, R25
                    lds R26, N_RANDOM_SIG

                    call read_from_user  ; testes de funcionamento

                    call check_user_inputs  ; checa os valores que ele entrou

                    ; retorna a ignorar o usuario
                    ser R16
                    sts IGNORE_USER, R16

                    rjmp NOT_GENIUS_GAME




LOOP: rjmp LOOP

